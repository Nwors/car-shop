{"ast":null,"code":"// The Emitter class provides the ability to call `.on()` on Dropzone to listen\n// to events.\n// It is strongly based on component's emitter class, and I removed the\n// functionality because of the dependency hell with different frameworks.\nexport default class Emitter {\n  // Add an event listener for given event\n  on(event, fn) {\n    this._callbacks = this._callbacks || {}; // Create namespace for this event\n\n    if (!this._callbacks[event]) {\n      this._callbacks[event] = [];\n    }\n\n    this._callbacks[event].push(fn);\n\n    return this;\n  }\n\n  emit(event, ...args) {\n    this._callbacks = this._callbacks || {};\n    let callbacks = this._callbacks[event];\n\n    if (callbacks) {\n      for (let callback of callbacks) {\n        callback.apply(this, args);\n      }\n    } // trigger a corresponding DOM event\n\n\n    if (this.element) {\n      this.element.dispatchEvent(this.makeEvent(\"dropzone:\" + event, {\n        args: args\n      }));\n    }\n\n    return this;\n  }\n\n  makeEvent(eventName, detail) {\n    let params = {\n      bubbles: true,\n      cancelable: true,\n      detail: detail\n    };\n\n    if (typeof window.CustomEvent === \"function\") {\n      return new CustomEvent(eventName, params);\n    } else {\n      // IE 11 support\n      // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n      var evt = document.createEvent(\"CustomEvent\");\n      evt.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n  } // Remove event listener for given event. If fn is not provided, all event\n  // listeners for that event will be removed. If neither is provided, all\n  // event listeners will be removed.\n\n\n  off(event, fn) {\n    if (!this._callbacks || arguments.length === 0) {\n      this._callbacks = {};\n      return this;\n    } // specific event\n\n\n    let callbacks = this._callbacks[event];\n\n    if (!callbacks) {\n      return this;\n    } // remove all handlers\n\n\n    if (arguments.length === 1) {\n      delete this._callbacks[event];\n      return this;\n    } // remove specific handler\n\n\n    for (let i = 0; i < callbacks.length; i++) {\n      let callback = callbacks[i];\n\n      if (callback === fn) {\n        callbacks.splice(i, 1);\n        break;\n      }\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/home/if/test/node_modules/dropzone/src/emitter.js"],"names":["Emitter","on","event","fn","_callbacks","push","emit","args","callbacks","callback","apply","element","dispatchEvent","makeEvent","eventName","detail","params","bubbles","cancelable","window","CustomEvent","evt","document","createEvent","initCustomEvent","off","arguments","length","i","splice"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,MAAMA,OAAN,CAAc;AAC3B;AACAC,EAAAA,EAAE,CAACC,KAAD,EAAQC,EAAR,EAAY;AACZ,SAAKC,UAAL,GAAkB,KAAKA,UAAL,IAAmB,EAArC,CADY,CAEZ;;AACA,QAAI,CAAC,KAAKA,UAAL,CAAgBF,KAAhB,CAAL,EAA6B;AAC3B,WAAKE,UAAL,CAAgBF,KAAhB,IAAyB,EAAzB;AACD;;AACD,SAAKE,UAAL,CAAgBF,KAAhB,EAAuBG,IAAvB,CAA4BF,EAA5B;;AACA,WAAO,IAAP;AACD;;AAEDG,EAAAA,IAAI,CAACJ,KAAD,EAAQ,GAAGK,IAAX,EAAiB;AACnB,SAAKH,UAAL,GAAkB,KAAKA,UAAL,IAAmB,EAArC;AACA,QAAII,SAAS,GAAG,KAAKJ,UAAL,CAAgBF,KAAhB,CAAhB;;AAEA,QAAIM,SAAJ,EAAe;AACb,WAAK,IAAIC,QAAT,IAAqBD,SAArB,EAAgC;AAC9BC,QAAAA,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqBH,IAArB;AACD;AACF,KARkB,CASnB;;;AACA,QAAI,KAAKI,OAAT,EAAkB;AAChB,WAAKA,OAAL,CAAaC,aAAb,CACE,KAAKC,SAAL,CAAe,cAAcX,KAA7B,EAAoC;AAAEK,QAAAA,IAAI,EAAEA;AAAR,OAApC,CADF;AAGD;;AACD,WAAO,IAAP;AACD;;AAEDM,EAAAA,SAAS,CAACC,SAAD,EAAYC,MAAZ,EAAoB;AAC3B,QAAIC,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,UAAU,EAAE,IAA7B;AAAmCH,MAAAA,MAAM,EAAEA;AAA3C,KAAb;;AAEA,QAAI,OAAOI,MAAM,CAACC,WAAd,KAA8B,UAAlC,EAA8C;AAC5C,aAAO,IAAIA,WAAJ,CAAgBN,SAAhB,EAA2BE,MAA3B,CAAP;AACD,KAFD,MAEO;AACL;AACA;AACA,UAAIK,GAAG,GAAGC,QAAQ,CAACC,WAAT,CAAqB,aAArB,CAAV;AACAF,MAAAA,GAAG,CAACG,eAAJ,CACEV,SADF,EAEEE,MAAM,CAACC,OAFT,EAGED,MAAM,CAACE,UAHT,EAIEF,MAAM,CAACD,MAJT;AAMA,aAAOM,GAAP;AACD;AACF,GA/C0B,CAiD3B;AACA;AACA;;;AACAI,EAAAA,GAAG,CAACvB,KAAD,EAAQC,EAAR,EAAY;AACb,QAAI,CAAC,KAAKC,UAAN,IAAoBsB,SAAS,CAACC,MAAV,KAAqB,CAA7C,EAAgD;AAC9C,WAAKvB,UAAL,GAAkB,EAAlB;AACA,aAAO,IAAP;AACD,KAJY,CAMb;;;AACA,QAAII,SAAS,GAAG,KAAKJ,UAAL,CAAgBF,KAAhB,CAAhB;;AACA,QAAI,CAACM,SAAL,EAAgB;AACd,aAAO,IAAP;AACD,KAVY,CAYb;;;AACA,QAAIkB,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,aAAO,KAAKvB,UAAL,CAAgBF,KAAhB,CAAP;AACA,aAAO,IAAP;AACD,KAhBY,CAkBb;;;AACA,SAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,SAAS,CAACmB,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACzC,UAAInB,QAAQ,GAAGD,SAAS,CAACoB,CAAD,CAAxB;;AACA,UAAInB,QAAQ,KAAKN,EAAjB,EAAqB;AACnBK,QAAAA,SAAS,CAACqB,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;AACA;AACD;AACF;;AAED,WAAO,IAAP;AACD;;AAhF0B","sourcesContent":["// The Emitter class provides the ability to call `.on()` on Dropzone to listen\n// to events.\n// It is strongly based on component's emitter class, and I removed the\n// functionality because of the dependency hell with different frameworks.\nexport default class Emitter {\n  // Add an event listener for given event\n  on(event, fn) {\n    this._callbacks = this._callbacks || {};\n    // Create namespace for this event\n    if (!this._callbacks[event]) {\n      this._callbacks[event] = [];\n    }\n    this._callbacks[event].push(fn);\n    return this;\n  }\n\n  emit(event, ...args) {\n    this._callbacks = this._callbacks || {};\n    let callbacks = this._callbacks[event];\n\n    if (callbacks) {\n      for (let callback of callbacks) {\n        callback.apply(this, args);\n      }\n    }\n    // trigger a corresponding DOM event\n    if (this.element) {\n      this.element.dispatchEvent(\n        this.makeEvent(\"dropzone:\" + event, { args: args })\n      );\n    }\n    return this;\n  }\n\n  makeEvent(eventName, detail) {\n    let params = { bubbles: true, cancelable: true, detail: detail };\n\n    if (typeof window.CustomEvent === \"function\") {\n      return new CustomEvent(eventName, params);\n    } else {\n      // IE 11 support\n      // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n      var evt = document.createEvent(\"CustomEvent\");\n      evt.initCustomEvent(\n        eventName,\n        params.bubbles,\n        params.cancelable,\n        params.detail\n      );\n      return evt;\n    }\n  }\n\n  // Remove event listener for given event. If fn is not provided, all event\n  // listeners for that event will be removed. If neither is provided, all\n  // event listeners will be removed.\n  off(event, fn) {\n    if (!this._callbacks || arguments.length === 0) {\n      this._callbacks = {};\n      return this;\n    }\n\n    // specific event\n    let callbacks = this._callbacks[event];\n    if (!callbacks) {\n      return this;\n    }\n\n    // remove all handlers\n    if (arguments.length === 1) {\n      delete this._callbacks[event];\n      return this;\n    }\n\n    // remove specific handler\n    for (let i = 0; i < callbacks.length; i++) {\n      let callback = callbacks[i];\n      if (callback === fn) {\n        callbacks.splice(i, 1);\n        break;\n      }\n    }\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}