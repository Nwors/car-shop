[{"/home/if/test/src/index.js":"1","/home/if/test/src/App.js":"2","/home/if/test/src/reportWebVitals.js":"3","/home/if/test/src/Structures/Car.js":"4","/home/if/test/src/Structures/TechnicalCharacteristics.js":"5","/home/if/test/src/components/Navbar/Navigation.jsx":"6","/home/if/test/src/components/LoginPage/LoginPage.jsx":"7","/home/if/test/src/components/HomePage/HomePage.jsx":"8","/home/if/test/src/components/CarsPage/CarsPage.jsx":"9","/home/if/test/src/components/CarsPage/Pagination/Pages.jsx":"10","/home/if/test/src/components/CarsPage/CarsCard/CarsCard.jsx":"11","/home/if/test/src/components/CreateAdForm/AdForm.jsx":"12","/home/if/test/src/components/CarsPage/CarPage/CarPage.jsx":"13","/home/if/test/src/components/CreateAdForm/UpdateForm/UpdateForm.jsx":"14"},{"size":599,"mtime":1628056096068,"results":"15","hashOfConfig":"16"},{"size":1471,"mtime":1628589801396,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1627895508205,"results":"18","hashOfConfig":"16"},{"size":378,"mtime":1628053854160,"results":"19","hashOfConfig":"16"},{"size":302,"mtime":1628053830890,"results":"20","hashOfConfig":"16"},{"size":1714,"mtime":1628157745732,"results":"21","hashOfConfig":"16"},{"size":134,"mtime":1628060794828,"results":"22","hashOfConfig":"16"},{"size":130,"mtime":1628060943239,"results":"23","hashOfConfig":"16"},{"size":8838,"mtime":1629269868630,"results":"24","hashOfConfig":"16"},{"size":933,"mtime":1628513837917,"results":"25","hashOfConfig":"16"},{"size":1185,"mtime":1629269868638,"results":"26","hashOfConfig":"16"},{"size":12725,"mtime":1629269868646,"results":"27","hashOfConfig":"16"},{"size":4639,"mtime":1629271227654,"results":"28","hashOfConfig":"16"},{"size":14366,"mtime":1629269868606,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"d9d5zi",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"/home/if/test/src/index.js",[],["66","67"],"/home/if/test/src/App.js",["68","69"],"\nimport './App.css';\nimport $ from 'jquery'\nimport {Redirect, Route, Switch} from \"react-router-dom\"\nimport {Car} from \"./Structures/Car.js\";\nimport {TechnicalCharacteristics} from \"./Structures/TechnicalCharacteristics\";\nimport Navigation from \"./components/Navbar/Navigation.jsx\";\nimport LoginPage from \"./components/LoginPage/LoginPage\";\nimport HomePage from \"./components/HomePage/HomePage\";\nimport CarsPage from \"./components/CarsPage/CarsPage\";\nimport Form from \"./components/CreateAdForm/AdForm\";\nimport CarPage from \"./components/CarsPage/CarPage/CarPage\";\nimport UpdateForm from \"./components/CreateAdForm/UpdateForm/UpdateForm\";\n\nfunction App() {\n  let car = new Car(\"Машина\", \"нормальное авто\", [\"1.jpg\", \"2.jpg\"], 10 , \"+79323221649\",\n      new TechnicalCharacteristics(\"Камаз\", \"А-10\",1920, \"DFFD\", -1));\n    return (\n    <>\n    <Switch>\n        <Route path={\"/login\"} render={() => <LoginPage/>}/>\n        <Route path={\"*\"} render={()=><Navigation/>}/>\n    </Switch>\n    <Switch>\n        <Route path={\"/home\"} render={() => <HomePage/>}/>\n        <Route path={\"/cars/:id\"} render={() => <CarPage/>}/>\n        <Route path={\"/cars\"} component={CarsPage}/>\n        <Route path={\"/createAd\"} render={() => <Form/>}/>\n        <Route path={\"/updateAd/:id\"} render={() => <UpdateForm/>}/>\n        <Redirect\n            to={{\n                pathname: \"/cars\",\n            }}\n        />\n    </Switch>\n    </>\n  );\n}\n\nexport default App;\n\n\n","/home/if/test/src/reportWebVitals.js",[],"/home/if/test/src/Structures/Car.js",[],"/home/if/test/src/Structures/TechnicalCharacteristics.js",[],"/home/if/test/src/components/Navbar/Navigation.jsx",["70"],"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./NavigationStyle.css\"\nimport {LinkContainer} from \"react-router-bootstrap\"\n\nimport React from 'react';\nimport {Nav, Navbar, Container, NavDropdown} from 'react-bootstrap'\n\nfunction Navigation() {\n    return (\n        <Navbar fixed=\"top\" bg=\"light\" expand=\"lg\">\n            <Container className={\"container-width-none container-position-fixed\"}>\n                <div className={\"logo-image\"}/>\n                <LinkContainer to={\"/\"}><Navbar.Brand href=\"/\">Car-shop</Navbar.Brand></LinkContainer>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        <LinkContainer to={\"/createAd\"}><Nav.Link>Создать объявление</Nav.Link></LinkContainer>\n                        <LinkContainer to={\"/cars\"}><Nav.Link>Каталог автомобилей</Nav.Link></LinkContainer>\n                        {/*<NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">*/}\n                        {/*    <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>*/}\n                        {/*    <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>*/}\n                        {/*    <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>*/}\n                        {/*    <NavDropdown.Divider />*/}\n                        {/*    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>*/}\n                        {/*</NavDropdown>*/}\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    );\n}\n\nexport default Navigation;","/home/if/test/src/components/LoginPage/LoginPage.jsx",[],"/home/if/test/src/components/HomePage/HomePage.jsx",[],"/home/if/test/src/components/CarsPage/CarsPage.jsx",["71","72","73","74","75","76","77"],"import React, {useEffect, useState, useRef} from 'react';\nimport {useLocation, useHistory} from \"react-router-dom\";\nimport Pages from \"./Pagination/Pages\";\nimport \"./CarsPageStyle.css\"\nimport CarCard from \"./CarsCard/CarsCard\";\nimport axios from \"axios\";\nimport {Button, Card} from \"react-bootstrap\";\nimport CarsCard from \"./CarsCard/CarsCard\";\nimport {Form} from \"react-bootstrap\"\n\nfunction CarsPage(props) {\n    const useDidMountEffect = (func, deps) => {\n        const didMount = useRef(false);\n        useEffect(() => {\n            if (didMount.current) func();\n            else didMount.current = true;\n        }, deps);\n    }\n    const location = useLocation();\n    const history = useHistory();\n    const [cars, setCars] = useState([]);\n    const [totalCount, setTotalCount] = useState(undefined)\n    const [carsCards, setCarsCards] = useState([])\n    let [curPage, setCurPage] = useState(1)\n    let [loadFlagShowMore, setLoadFlagShowMore] = useState(false)\n    let [changePageFlag, setChangePageFlag] = useState({left: false, right: false})\n    let [countOfPages, setCountOfPages] = useState(0)\n    let perPage = 4;\n    const [secretKey, setSecretKey] = useState(0)\n\n    const init = () => {\n        //Get page parameter value from url get parameters and set 1 if page is not passed to URL\n        let page = location.search.substr !== \"\" ? location.search.substr(1).split(\"&\").map(it => it.split(\"=\")).filter(it => it[0] === \"page\")[0] : 1\n        let price = location.search.substr !== \"\" ? location.search.substr(1).split(\"&\").map(it => it.split(\"=\")).filter(it => it[0] === \"price\")[0] : undefined\n        let model = location.search.substr !== \"\" ? location.search.substr(1).split(\"&\").map(it => it.split(\"=\")).filter(it => it[0] === \"model\")[0] : undefined\n        let brand = location.search.substr !== \"\" ? location.search.substr(1).split(\"&\").map(it => it.split(\"=\")).filter(it => it[0] === \"brand\")[0] : undefined\n        if(price === undefined) {price = []} else {\n            document.getElementById(\"price-min\").setAttribute('value',price[1].split('-')[0])\n            document.getElementById(\"price-max\").setAttribute('value',price[1].split('-')[1])\n\n        }\n        if(model === undefined) {model = \"\"} else {\n            document.getElementById(\"filter-model\").setAttribute('value',model[1])\n        }\n        if(brand === undefined) {brand = \"\"} else {\n            document.getElementById(\"filter-brand\").setAttribute('value',brand[1])\n        }\n        setFiltersUrl(price[1], model[1], brand[1])\n\n        if(page === undefined) {\n            page = 1\n        } else if(isNaN(page[1])) {\n            page = 1\n        } else if(page[1] <= 0) {\n            page = 1\n        } else if(page[1] >= 100) {\n            page = 1\n        } else {\n            page = Number(page[1])\n            setCurPage(Number(page))\n        }\n        //console.log(`http://75f9ffd4c830.ngrok.io/cars/get-car-page${(price.length !== 0) ? `?price=${price[1]}` : \"\"}`)\n        axios.get(`http://192.168.88.25:8888/cars/get-car-page?${(price.length !== 0) ? `&price=${price[1]}` : \"\"}${(model.length !== 0) ? `&model=${model[1]}` : \"\"}${(brand.length !== 0) ? `&brand=${brand[1]}` : \"\"}`, {\n            params: {\n                'page': page,\n                'per-page': perPage\n            }\n        }).then(it => {\n                setCars(it.data.items)\n                setTotalCount(it.data.totalCount)\n            }\n        )\n    }\n\n    useDidMountEffect(() => {\n        let cards = cars.map((it) => <CarsCard id = {it.id} key={it.id} name={it.name} price={it.price} image={JSON.parse(it.photo)}/>)\n        carsCards.push(cards)\n    }, [cars])\n\n\n    useDidMountEffect(() => {\n        if(loadFlagShowMore) {\n            if(curPage < countOfPages) {\n                setCurPage(curPage + 1)\n            }\n        }}, [loadFlagShowMore])\n\n    useDidMountEffect(() => {\n        if(changePageFlag.right && curPage < countOfPages) {setCurPage(curPage + 1)} else if (changePageFlag.left && curPage > 1) setCurPage(curPage - 1)\n    }, [changePageFlag])\n\n    useDidMountEffect(() => {\n        let filterString = getFilterQuery()\n        history.push(`/cars?page=${curPage}${filterString}`)\n        if(loadFlagShowMore) {\n            axios.get(`http://192.168.88.25:8888/cars/get-car-page?${filterString}`, {\n                params: {\n                    'page': curPage,\n                    'per-page': perPage\n                }\n            }).then(it => {\n                    setCars(it.data.items)\n                    setLoadFlagShowMore(false)\n                }\n            )\n        }\n        if(changePageFlag.left || changePageFlag.right) {\n            if(curPage > countOfPages) {setCarsCards([]);setCurPage(countOfPages);return}\n            setCarsCards([])\n            axios.get(`http://192.168.88.25:8888/cars/get-car-page?${filterString}`, {\n                params: {\n                    'page': curPage,\n                    'per-page': perPage\n                }\n            }).then(it => {\n                    setCars(it.data.items)\n                    setChangePageFlag({left: false, right: false})\n                }\n            )\n        }\n    }, [curPage])\n\n    useEffect(() => {\n        init()\n    }, [])\n\n    useDidMountEffect(() => setCountOfPages(Math.ceil(totalCount / perPage)), [totalCount])\n    let changePage = (direction) => {\n        if(direction && curPage < countOfPages) {\n            setChangePageFlag({right: true, left: false})\n        } else if (!direction && curPage > 1) {\n            setChangePageFlag({right: false, left: true})\n        }\n    }\n    const [filters, sFilters] = useState({})\n\n    const getFilterQuery = () => {\n        let queryString = \"&\"\n        Object.keys(filters).forEach(key => {\n            queryString += `${key}=${filters[key]}&`\n        })\n        console.log(filters)\n        queryString = queryString.slice(0,-1)\n        return queryString\n    }\n\n    useDidMountEffect(() => {\n        console.log(`/cars?page=1${getFilterQuery(filters)}`)\n        history.push(`/cars?page=1${getFilterQuery(filters)}`)\n    },[filters])\n\n\n    const setFiltersUrl = (price, model, brand) => {\n        let obj = {}\n        obj['price'] = price\n        obj['model'] = model\n        obj['brand'] = brand\n        if(price === undefined) delete obj['price']\n        if(model === undefined) delete obj['model']\n        if(brand=== undefined) delete obj['brand']\n        sFilters(obj)\n    }\n    const setFilters = () => {\n        let min = document.getElementById(\"price-min\").value\n        let max = document.getElementById(\"price-max\").value\n        let model = document.getElementById(\"filter-model\").value\n        let brand = document.getElementById(\"filter-brand\").value\n        let obj = {}\n        obj[\"price\"] = `${min}-${max}`\n        obj[\"model\"] = `${model}`\n        obj[\"brand\"] = `${brand}`\n        if(min === \"\" || isNaN(min)) min = 0\n        if(max === \"\" || isNaN(max)) max = 0\n        if(model === \"\") delete obj['model']\n        if(brand === \"\") delete obj['brand']\n        sFilters(\n            obj\n        )\n    }\n\n\n    return (\n    <div className={\"grid-container\"}>\n        <div className={\"left-menu\"}>\n            <div className={\"filter-block\"}>\n                <div className={\"filter-name\"}>Ценовой фильтр</div>\n                <div className={\"filter-fields\"}>\n                    <span><Form.Control id={\"price-min\"} className={\"filter-field\"} placeholder=\"от\" /></span>\n                    <span><Form.Control id={\"price-max\"} className={\"filter-field\"} placeholder=\"до\" /></span>\n                </div>\n                <div className={\"filter-fields\"}>\n                    <span><Form.Control id={\"filter-brand\"} className={\"filter-field-second\"} placeholder=\"Марка\" /></span>\n                </div>\n                <div className={\"filter-fields\"}>\n                    <span><Form.Control id={\"filter-model\"} className={\"filter-field-second\"} placeholder=\"Модель\" /></span>\n                </div>\n                <Button className={\"btn-next\"} onClick={() => {setFilters(); setTimeout(()=>document.location.reload(), 100)}}>Применить</Button>\n            </div>\n        </div>\n        <div className={\"main-container\"}>\n            <div className={\"cars-content\"}>\n                <div className=\"container cars-container\">\n                    <div className=\"row\">\n                        {carsCards}\n                    </div>\n                </div>\n                <div className={\"btn-wrapper\"}><Button className={\"btn-next\"} onClick={\n                    () => {if(curPage < countOfPages) setLoadFlagShowMore(true)}}>Показать еще</Button></div>\n                <Pages curPage={curPage} totalCount={countOfPages} changePage={changePage} />\n            </div>\n        </div>\n    </div>\n    );\n}\n\nexport default CarsPage;\n","/home/if/test/src/components/CarsPage/Pagination/Pages.jsx",["78","79"],"import React from 'react';\nimport {Pagination} from \"react-bootstrap\";\nimport \"./PaginationStyle.css\"\nimport {Redirect, useHistory} from \"react-router-dom\";\n\n\nfunction Pages({curPage, totalCount, changePage}) {\n    const history = useHistory()\n    return (\n        <div className={\"pagination-container d-flex\"}>\n        <Pagination className={\"pagination-cars\"}>\n            <Pagination.First/>\n            <Pagination.Prev onClick={() => changePage(false)}/>\n\n            <Pagination.Item onClick={() => changePage(false)}>{curPage - 1 === 0 ? \"-\" : curPage - 1}</Pagination.Item>\n            <Pagination.Item >{curPage}</Pagination.Item>\n            <Pagination.Item onClick={() => changePage(true)}>{curPage + 1 > totalCount ? \"-\" : curPage + 1}</Pagination.Item>\n\n            <Pagination.Next onClick={() => changePage(true)} />\n            <Pagination.Last/>\n        </Pagination>\n        </div>\n    );\n}\n\nexport default Pages;","/home/if/test/src/components/CarsPage/CarsCard/CarsCard.jsx",[],"/home/if/test/src/components/CreateAdForm/AdForm.jsx",["80","81","82","83"],"import React, {useEffect, useRef, useState} from 'react';\nimport {Button, Form, FormControl} from \"react-bootstrap\";\nimport './AdForm.css'\nimport { useForm } from \"react-hook-form\";\nimport { ErrorMessage } from '@hookform/error-message';\nimport axios from \"axios\";\nimport {Car} from \"../../Structures/Car\";\nimport {TechnicalCharacteristics} from \"../../Structures/TechnicalCharacteristics\";\n\n\n\nfunction AdForm(props) {\n\n    const useDidMountEffect = (func, deps) => {\n        const didMount = useRef(false);\n        useEffect(() => {\n            if (didMount.current) func();\n            else didMount.current = true;\n        }, deps);\n    }\n\n    let [characteristicsFlag, setCharacteristicsFlag] = useState(false)\n    const [allOptions, setAllOptions] = useState([])\n    const handleDelete = (id) => () => {\n        const items = allOptions.filter(item => item !== id);\n        unregister(`option${id}`)\n        setAllOptions(items)\n    }\n\n    const displayCharacteristics = () => {setCharacteristicsFlag(!characteristicsFlag)}\n\n    const {register, handleSubmit, formState: { errors }, watch, unregister} = useForm()\n    const onSubmit = (data) => {\n        let characteristics\n        console.log(\"Данные\",data)\n\n        if(characteristicsFlag) characteristics = new TechnicalCharacteristics(data.label, data.model, data.year, data.body, data.raceDistance)\n\n        let car = new Car(data.name, data.description, undefined, data.price, data.telephone, characteristics, Object.keys(data)\n            .filter(it => it.includes(\"option\")).map(it => data[it])\n        )\n        let bodyFormData = new FormData();\n        bodyFormData.append(\"car\",JSON.stringify(car))\n        bodyFormData.append(\"image\", data.images[0])\n\n        console.log(\"Машина\", car)\n        axios({\n            url: \"http://192.168.88.25:8888/cars/add-car\",\n            method: \"POST\",\n            data: bodyFormData,\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        }).then(it => console.log(it))\n\n    }\n    const onError = (errors) => {console.log(errors)}\n    //console.log(watch())\n    //console.log(formState.errors)\n    return (\n        <Form className={\"ad-form\"} onSubmit={handleSubmit(onSubmit, onError)}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                <div className={\"form-title\"}>Заполните предложенные поля</div>\n                <Form.Label>Название авто</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"name\" /></div>\n                <FormControl type={\"text\"} {...register('name', {required: \"Пожалуйста введите название\"})}\n                 placeholder=\"Введите название авто\" />\n                <Form.Text className=\"text-muted\">\n                    *не более 40 символов (например: Chevrolet lacetti).\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                <Form.Label>Описание</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"description\" /></div>\n                <Form.Control as=\"textarea\" {...register('description', {required: \"Пожалуйста введите описание\"})} type=\"text\" placeholder=\"Введите описание\" />\n                <Form.Text className=\"text-muted\">\n                    *не более 256 символов.\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formFile\" className=\"mb-3 drop-form\">\n\n                <Form.Label>Загрузите фотографии или изображения</Form.Label>\n                <div>\n                    <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"images\" /></div>\n                </div>\n                <Form.Control {...register('images', {\n                    required: \"Прикрепите хотябы одно изображение\",\n                    validate: {\n                        lessThan10MB: files => files[0]?.size < 10000000 || 'Максимальный размер 10 Мб',\n                        acceptedFormats: files =>\n                            ['image/jpeg', 'image/png','image/jpg'].includes(\n                                files[0]?.type\n                            ) || 'Поддерживаются следующие форматы: PNG, JPEG, JPG',\n                    },\n                })}  type=\"file\" multiple/>\n                {/*<FileUploader*/}\n                {/*    types={[\"JPG\", \"PNG\"]}*/}\n                {/*    name=\"file\"*/}\n                {/*/>*/}\n                <div>\n                    <Form.Text className=\"text-muted\">\n                    *допустимые форматы .jpg .png .jpeg.\n                     </Form.Text>\n                </div>\n            </Form.Group>\n            <Form.Group className=\"mb-3\">\n                <Form.Label >Номер телефона</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"telephone\" /></div>\n                <Form.Control  placeholder=\"Введите телефон\"{...register('telephone', {required: \"Пожалуйста введите телефонный номер\",\n                    validate: {\n                    isNumber: it => !isNaN(it.slice(1)) || \"Введите корректный номер\",\n                    checkFirst: it => !(isNaN(it) && it !== '+') || \"Введите корректный номер\"\n                    },\n                    minLength: {\n                    value: 11,\n                    message: \"Минимальная длина 11 символов (с кодом страны 12)\"\n                    },\n                    maxLength: {\n                    value: 12,\n                    message: \"Максимальная длина 12\"\n                    }})}/>\n                <Form.Text className=\"text-muted\">\n                    *в международном или обычном формате.\n                </Form.Text>\n            </Form.Group>\n            <Form.Group className=\"mb-3\">\n                <Form.Label >Цена продажи в рублях</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"price\" /></div>\n                <Form.Control {...register('price', {required: \"Пожалуйста введите цену\", validate: {\n                    isNumber: it => !isNaN(it) || \"Введите корректную цену\",\n                    aboveZero: it => !(it < 0)  || \"Введите корректную цену\",\n                    toHigh: it => !(it >= 2000000000000) || \"Введите корректуню цену\"\n                    }})}  placeholder=\"Введите цену\" />\n                <Form.Text className=\"text-muted\">\n                    *целое количество\n                </Form.Text>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                <Form.Check onChange={() => displayCharacteristics()} type=\"checkbox\" label=\"Указать технические характеристики машины\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Марка машины</Form.Label>\n                <div className=\"error-message\"><ErrorMessage errors={errors} name=\"label\" /></div>\n                <Form.Control {...(() => {\n                    if (characteristicsFlag) return {...register('label',\n                            {required: \"Пожалуйста введите марку\"}\n                        )}\n                    return {}\n                })()} placeholder=\"Введите марку\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Модель машины</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"model\" /></div>\n                <Form.Control {...(() => {\n                    if (characteristicsFlag) return {...register('model',\n                            {required: \"Пожалуйста введите модель\"}\n                        )}\n                    return {}\n                })()} placeholder=\"Введите модель\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Год производства</Form.Label>\n                <div className=\"error-message\"><ErrorMessage errors={errors} name=\"year\" /></div>\n                <Form.Control {...(() => {\n                    if (characteristicsFlag) return {...register('year', {required: \"Пожалуйста введите год производства\" , validate: {\n                        isNumber: it => !isNaN(it) || \"Введите корректный год производства\",\n                        aboveZero: it => !(it < 1800)  || \"Введите корректный год производства\",\n                        toHigh: it => !(it > new Date().getFullYear()) || \"Введите корректный год производства\"\n                        }})}\n                    return {}\n                })()}  placeholder=\"Введите год производства\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Тип кузова</Form.Label>\n                <div className=\"error-message\"><ErrorMessage errors={errors} name=\"body\" /></div>\n                <Form.Control {...(() => {\n                    if (characteristicsFlag) return {...register('body',\n                            {required: \"Пожалуйста введите тип кузова\"}\n                        )}\n                    return {}\n                })()} placeholder=\"Введите тип кузова\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Пробег</Form.Label>\n                <div className=\"error-message\"><ErrorMessage errors={errors} name=\"raceDistance\" /></div>\n                <Form.Control {...(() => {\n                    if(characteristicsFlag) return {...register('raceDistance',\n                            {required: \"Пожалуйста введите пробег\", validate: {\n                                    isNumber: it => !isNaN(it) || \"Введите корректный пробег\",\n                                    aboveZero: it => !(it < 0)  || \"Введите корректный пробег\",\n                                    toHigh: it => !(it > 2000000000) || \"Введите корректный пробег\"\n                                }}\n                        )}\n                    else return {}\n                })()} placeholder=\"Введите пробег\" />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                <span><Button onClick={() => {\n                    const id = Math.floor(Math.random() * 999999)\n                    setAllOptions([\n                        ...allOptions,\n                        id\n                    ])\n                }} className={\"add-option\"}>+</Button></span>\n                <span>Добавить дополнительную опцию</span>\n            </Form.Group>\n            {allOptions.map(itId =>\n                <Form.Group className={`mb-3`} key = {itId}>\n                    <span><Button className={\"add-option\"} onClick={handleDelete(itId)}>-</Button></span>\n                    <Form.Label>Дополнительная опция</Form.Label>\n                    <div className=\"error-message\"><ErrorMessage errors={errors} name={`option${itId}`}/></div>\n                    <span><Form.Control className={\"additional-option\"} {...register(`option${itId}`,\n                    {required: \"Пожалуйста введите опцию\"})}  placeholder=\"Введите дополнительную опцию\" /></span>\n                </Form.Group>\n            )}\n            <Button  variant=\"primary\" type=\"submit\">\n                Опубликовать\n            </Button>\n        </Form>\n    );\n}\n\nexport default AdForm;\n","/home/if/test/src/components/CarsPage/CarPage/CarPage.jsx",["84","85","86","87"],"import React, {useEffect, useRef, useState} from 'react';\nimport axios from \"axios\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport \"./CarPage.css\"\nimport {Button} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\n\nfunction CarPage() {\n    const useDidMountEffect = (func, deps) => {\n        const didMount = useRef(false);\n        useEffect(() => {\n            if (didMount.current) func();\n            else didMount.current = true;\n        }, deps);\n    }\n\n    const location = useLocation();\n    const history = useHistory()\n    const names = [\"Брэнд\", \"Модель\", \"Год производства\", \"Тип кузова\", \"Общий пробег\"]\n    const [img, setImg] = useState([])\n    const [carData, setCarData] = useState({})\n    const [technicalCharacteristicsFlag, setTechnicalCharactersiticsFlag] = useState(false)\n    const [options, setOptions] = useState([])\n    const [car, setCar] = useState({})\n    useEffect(() => {\n        let id = location.pathname.split('/').pop()\n        if(isNaN(id)) history.push('/cars')\n\n        axios(\"http://192.168.88.25:8888/cars/get-car-by-id\", {\n            params: {\n                id: location.pathname.split('/').pop()\n            }\n        }).then(it => {setCarData(it.data)})\n    }, [])\n\n    useDidMountEffect(() => {\n        //setImg(JSON.parse(carData.photo))\n        if(carData.length === 0) {\n            history.push('/cars')\n        } else {\n            let options = carData.map(it => it.option_name)\n            setImg(JSON.parse(carData[0].photo))\n            setCar(carData[0])\n            setOptions(options)\n        }\n    }, [carData])\n\n    useEffect(() => {\n        if(car.hasOwnProperty(\"body\") && car.body != null) {\n            setTechnicalCharactersiticsFlag(true)\n        }\n    }, [car])\n\n    return (\n        <div className={\"car-page-container\"}>\n            {car.name && (\n        <>\n        <span className={\"name\"}>{car.name}</span>\n        <span className={\"price\"}>{`${car.price} ₽`}</span>\n        </>)}\n        <div className={\"image-container\"} style={{backgroundImage: `url(\"http://192.168.88.25:8888/uploads/${img}\")`}}>\n        </div>\n            {technicalCharacteristicsFlag ? <div className={\"field-name top-name\"}>Технические характеристики: </div> : undefined}\n            {technicalCharacteristicsFlag ? <div><span className={\"mini-field-name\"}>Марка машины: </span><span className={\"field-description\"}>{`${car.brand}`}</span></div> : undefined}\n            {technicalCharacteristicsFlag ? <div><span className={\"mini-field-name\"}>Модель машины: </span><span className={\"field-description\"}>{`${car.model}`}</span></div> : undefined}\n            {technicalCharacteristicsFlag ? <div><span className={\"mini-field-name\"}>Год производства: </span><span className={\"field-description\"}>{`${car.productionyear}`}</span></div> : undefined}\n            {technicalCharacteristicsFlag ? <div><span className={\"mini-field-name\"}>Тип кузова: </span><span className={\"field-description\"}>{`${car.body}`}</span></div> : undefined}\n            {technicalCharacteristicsFlag ? <div><span className={\"mini-field-name\"}>Общий пробег(км): </span><span className={\"field-description\"}>{`${car.mileage}`}</span></div> : undefined}\n            <div className={\"field-name top-name\"}>Описание: </div>\n            <div className={\"description\"}>{car.description}</div>\n            {options[0] !== null ?  <div className={\"field-name top-name\"}>Дополнительные опции: </div> : undefined}\n            {options[0] !== null ?  options.map(it =>\n                <div><span className={\"mini-field-name\"}>Опция: </span><span className={\"field-description\"}>{`${it}`}</span></div>\n            ) : undefined}\n            <div className={\"field-name top-name\"}>Телефон для связи: </div>\n            <div className={'field-description'}>{car.contacts}</div>\n            <LinkContainer to={`/updateAd/${car.id}`}><Button className={\"btn-edit\"}>Редактировать объявление</Button></LinkContainer>\n            <Button className={\"btn-edit\"} onClick={() => {\n                if(window.confirm('Вы действительно хотите удалить объявление')) {\n                    history.push(\"/cars\")\n                    axios(`http://192.168.88.25:8888/cars/delete-car?id=${car.id}`).then(it => {\n                    })\n                }\n            }}>Удалить объявление</Button>\n        </div>\n    );\n}\n\n\nexport default CarPage;\n","/home/if/test/src/components/CreateAdForm/UpdateForm/UpdateForm.jsx",["88","89","90","91"],"import React, {useEffect, useRef, useState} from 'react';\nimport {Button, Form, FormControl} from \"react-bootstrap\";\nimport './UpdateForm.css'\nimport { useForm } from \"react-hook-form\";\nimport { ErrorMessage } from '@hookform/error-message';\nimport axios from \"axios\";\nimport {Car} from \"../../../Structures/Car\";\nimport {TechnicalCharacteristics} from \"../../../Structures/TechnicalCharacteristics\";\nimport {useHistory, useLocation} from \"react-router-dom\";\n\n\n\nfunction UpdateForm(props) {\n\n    const useDidMountEffect = (func, deps) => {\n        const didMount = useRef(false);\n        useEffect(() => {\n            if (didMount.current) func();\n            else didMount.current = true;\n        }, deps);\n    }\n    const location = useLocation()\n    const history = useHistory()\n    const [carData, setCarData] = useState([])\n    const [options, setOptions] = useState([])\n    const [car, setCar] = useState({})\n\n    useEffect(() => {\n        let id = location.pathname.split('/').pop()\n        if(isNaN(id)) history.push('/cars')\n        axios(\"http://192.168.88.25:8888/cars/get-car-by-id\", {\n            params: {\n                id: location.pathname.split('/').pop()\n            }\n        }).then(it => {setCarData(it.data)})\n    }, [])\n\n    useDidMountEffect(() => {\n        let options = carData.map(it => it.option_name)\n        setCar(carData[0])\n        setOptions(options)\n    }, [carData])\n\n    useDidMountEffect(() => {\n        setAllOptions(options)\n    }, [options])\n\n\n    useDidMountEffect(() => {\n        console.log(car)\n        setValue('name', car.name)\n        setValue('description', car.description)\n        setValue('telephone', car.contacts)\n        setValue('price', car.price)\n        if(car.body != null) {\n            setValue('check-box', true)\n            displayCharacteristics()\n            setValue('label', car.brand)\n            setValue('model', car.model)\n            setValue('year', car.productionyear)\n            setValue('body', car.body)\n            setValue('raceDistance', car.mileage)\n        }\n        if(options[0] != null) {\n            options.forEach(option => {\n                setValue(`option${option}`,option)\n            })\n        }\n    }, [car])\n\n    let [characteristicsFlag, setCharacteristicsFlag] = useState(false)\n    const [allOptions, setAllOptions] = useState([])\n\n    const handleDelete = (id) => () => {\n        const items = allOptions.filter(item => item !== id);\n        unregister(`option${id}`)\n        setAllOptions(items)\n    }\n\n    const displayCharacteristics = () => {setCharacteristicsFlag(!characteristicsFlag)}\n\n    const {register, setValue, handleSubmit, formState: { errors }, watch, unregister} = useForm()\n\n    const onSubmit = (data) => {\n        let characteristics\n        console.log(\"Данные\", data)\n\n        if(characteristicsFlag) characteristics = new TechnicalCharacteristics(data.label, data.model, data.year, data.body, data.raceDistance)\n\n        let dataCar = new Car(data.name, data.description, undefined, data.price, data.telephone, characteristics, Object.keys(data)\n            .filter(it => it.includes(\"option\")).map(it => data[it])\n        )\n        dataCar['id'] = car.id\n        let bodyFormData = new FormData();\n        bodyFormData.append(\"car\",JSON.stringify(dataCar))\n        bodyFormData.append(\"image\", data.images[0])\n\n        console.log(\"Машина\", dataCar)\n        axios({\n            url: \"http://192.168.88.25:8888/cars/update-car\",\n            method: \"POST\",\n            data: bodyFormData,\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        }).then(it => console.log(it))\n    }\n    const onError = (errors) => {console.log(errors)}\n\n    //console.log(watch())\n    //console.log(formState.errors)\n    return (\n        <Form className={\"ad-form\"} onSubmit={handleSubmit(onSubmit, onError)}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                <div className={\"form-title\"}>Отредактируйте поля</div>\n                <Form.Label>Название авто</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"name\" /></div>\n                <FormControl type={\"text\"} {...register('name', {required: \"Пожалуйста введите название\"})}\n                 placeholder=\"Введите название авто\" />\n                <Form.Text className=\"text-muted\">\n                    *не более 40 символов (например: Chevrolet lacetti).\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                <Form.Label>Описание</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"description\" /></div>\n                <Form.Control as=\"textarea\" {...register('description', {required: \"Пожалуйста введите описание\"})} type=\"text\" placeholder=\"Введите описание\" />\n                <Form.Text className=\"text-muted\">\n                    *не более 256 символов.\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formFile\" className=\"mb-3 drop-form\">\n\n                <Form.Label>Загрузите фотографии или изображения</Form.Label>\n                <div>\n                    <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"images\" /></div>\n                </div>\n                <Form.Control {...register('images', {\n                    required: \"Прикрепите хотябы одно изображение\",\n                    validate: {\n                        lessThan10MB: files => files[0]?.size < 10000000 || 'Максимальный размер 10 Мб',\n                        acceptedFormats: files =>\n                            ['image/jpeg', 'image/png','image/jpg'].includes(\n                                files[0]?.type\n                            ) || 'Поддерживаются следующие форматы: PNG, JPEG, JPG',\n                    },\n                })}  type=\"file\" multiple/>\n                {/*<FileUploader*/}\n                {/*    types={[\"JPG\", \"PNG\"]}*/}\n                {/*    name=\"file\"*/}\n                {/*/>*/}\n                <div>\n                    <Form.Text className=\"text-muted\">\n                    *допустимые форматы .jpg .png .jpeg.\n                     </Form.Text>\n                </div>\n            </Form.Group>\n            <Form.Group className=\"mb-3\">\n                <Form.Label >Номер телефона</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"telephone\" /></div>\n                <Form.Control  placeholder=\"Введите телефон\"{...register('telephone', {required: \"Пожалуйста введите телефонный номер\",\n                    validate: {\n                    isNumber: it => !isNaN(it.slice(1)) || \"Введите корректный номер\",\n                    checkFirst: it => !(isNaN(it) && it !== '+') || \"Введите корректный номер\"\n                    },\n                    minLength: {\n                    value: 11,\n                    message: \"Минимальная длина 11 символов (с кодом страны 12)\"\n                    },\n                    maxLength: {\n                    value: 12,\n                    message: \"Максимальная длина 12\"\n                    }})}/>\n                <Form.Text className=\"text-muted\">\n                    *в международном или обычном формате.\n                </Form.Text>\n            </Form.Group>\n            <Form.Group className=\"mb-3\">\n                <Form.Label >Цена продажи в рублях</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"price\" /></div>\n                <Form.Control {...register('price', {required: \"Пожалуйста введите цену\", validate: {\n                    isNumber: it => !isNaN(it) || \"Введите корректную цену\",\n                    aboveZero: it => !(it < 0)  || \"Введите корректную цену\",\n                    toHigh: it => !(it >= 2000000000000) || \"Введите корректуню цену\"\n                    }})}  placeholder=\"Введите цену\" />\n                <Form.Text className=\"text-muted\">\n                    *целое количество\n                </Form.Text>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                <Form.Check {...register('check-box')} onChange={() => displayCharacteristics()} type=\"checkbox\" label=\"Указать технические характеристики машины\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Марка машины</Form.Label>\n                <div className=\"error-message\"><ErrorMessage errors={errors} name=\"label\" /></div>\n                <Form.Control {...(() => {\n                    if (characteristicsFlag) return {...register('label',\n                            {required: \"Пожалуйста введите марку\"}\n                        )}\n                    return {}\n                })()} placeholder=\"Введите марку\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Модель машины</Form.Label>\n                <div className={\"error-message\"}><ErrorMessage errors={errors} name=\"model\" /></div>\n                <Form.Control {...(() => {\n                    if (characteristicsFlag) return {...register('model',\n                            {required: \"Пожалуйста введите модель\"}\n                        )}\n                    return {}\n                })()} placeholder=\"Введите модель\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Год производства</Form.Label>\n                <div className=\"error-message\"><ErrorMessage errors={errors} name=\"year\" /></div>\n                <Form.Control {...(() => {\n                    if (characteristicsFlag) return {...register('year', {required: \"Пожалуйста введите год производства\" , validate: {\n                        isNumber: it => !isNaN(it) || \"Введите корректный год производства\",\n                        aboveZero: it => !(it < 1800)  || \"Введите корректный год производства\",\n                        toHigh: it => !(it > new Date().getFullYear()) || \"Введите корректный год производства\"\n                        }})}\n                    return {}\n                })()}  placeholder=\"Введите год производства\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Тип кузова</Form.Label>\n                <div className=\"error-message\"><ErrorMessage errors={errors} name=\"body\" /></div>\n                <Form.Control {...(() => {\n                    if (characteristicsFlag) return {...register('body',\n                            {required: \"Пожалуйста введите тип кузова\"}\n                        )}\n                    return {}\n                })()} placeholder=\"Введите тип кузова\" />\n            </Form.Group>\n            <Form.Group className={`mb-3 ${characteristicsFlag ? \"slider\" : \"slider slider-closed\"}`}>\n                <Form.Label>Пробег</Form.Label>\n                <div className=\"error-message\"><ErrorMessage errors={errors} name=\"raceDistance\" /></div>\n                <Form.Control {...(() => {\n                    if(characteristicsFlag) return {...register('raceDistance',\n                            {required: \"Пожалуйста введите пробег\", validate: {\n                                    isNumber: it => !isNaN(it) || \"Введите корректный пробег\",\n                                    aboveZero: it => !(it < 0)  || \"Введите корректный пробег\",\n                                    toHigh: it => !(it > 2000000000) || \"Введите корректный пробег\"\n                                }}\n                        )}\n                    else return {}\n                })()} placeholder=\"Введите пробег\" />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                <span><Button onClick={() => {\n                    const id = Math.floor(Math.random() * 999999)\n                    setAllOptions([\n                        ...allOptions,\n                        id\n                    ])\n                }} className={\"add-option\"}>+</Button></span>\n                <span>Добавить дополнительную опцию</span>\n            </Form.Group>\n            {allOptions.map(itId =>\n                <Form.Group className={`mb-3`} key = {itId}>\n                    <span><Button className={\"add-option\"} onClick={handleDelete(itId)}>-</Button></span>\n                    <Form.Label>Дополнительная опция</Form.Label>\n                    <div className=\"error-message\"><ErrorMessage errors={errors} name={`option${itId}`}/></div>\n                    <span><Form.Control className={\"additional-option\"} {...register(`option${itId}`,\n                    {required: \"Пожалуйста введите опцию\"})}  placeholder=\"Введите дополнительную опцию\" /></span>\n                </Form.Group>\n            )}\n            <Button  variant=\"primary\" type=\"submit\">\n                Опубликовать\n            </Button>\n        </Form>\n    );\n}\n\nexport default UpdateForm;\n",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":9},{"ruleId":"96","severity":1,"message":"100","line":16,"column":7,"nodeType":"98","messageId":"99","endLine":16,"endColumn":10},{"ruleId":"96","severity":1,"message":"101","line":7,"column":33,"nodeType":"98","messageId":"99","endLine":7,"endColumn":44},{"ruleId":"96","severity":1,"message":"102","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":15},{"ruleId":"96","severity":1,"message":"103","line":7,"column":17,"nodeType":"98","messageId":"99","endLine":7,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":17,"column":12,"nodeType":"98","endLine":17,"endColumn":16},{"ruleId":"104","severity":1,"message":"106","line":17,"column":12,"nodeType":"98","endLine":17,"endColumn":16,"suggestions":"107"},{"ruleId":"96","severity":1,"message":"108","line":29,"column":12,"nodeType":"98","messageId":"99","endLine":29,"endColumn":21},{"ruleId":"96","severity":1,"message":"109","line":29,"column":23,"nodeType":"98","messageId":"99","endLine":29,"endColumn":35},{"ruleId":"104","severity":1,"message":"110","line":125,"column":8,"nodeType":"111","endLine":125,"endColumn":10,"suggestions":"112"},{"ruleId":"96","severity":1,"message":"113","line":4,"column":9,"nodeType":"98","messageId":"99","endLine":4,"endColumn":17},{"ruleId":"96","severity":1,"message":"114","line":8,"column":11,"nodeType":"98","messageId":"99","endLine":8,"endColumn":18},{"ruleId":"96","severity":1,"message":"115","line":14,"column":11,"nodeType":"98","messageId":"99","endLine":14,"endColumn":28},{"ruleId":"104","severity":1,"message":"105","line":19,"column":12,"nodeType":"98","endLine":19,"endColumn":16},{"ruleId":"104","severity":1,"message":"106","line":19,"column":12,"nodeType":"98","endLine":19,"endColumn":16,"suggestions":"116"},{"ruleId":"96","severity":1,"message":"117","line":32,"column":59,"nodeType":"98","messageId":"99","endLine":32,"endColumn":64},{"ruleId":"104","severity":1,"message":"105","line":14,"column":12,"nodeType":"98","endLine":14,"endColumn":16},{"ruleId":"104","severity":1,"message":"106","line":14,"column":12,"nodeType":"98","endLine":14,"endColumn":16,"suggestions":"118"},{"ruleId":"96","severity":1,"message":"119","line":19,"column":11,"nodeType":"98","messageId":"99","endLine":19,"endColumn":16},{"ruleId":"104","severity":1,"message":"120","line":34,"column":8,"nodeType":"111","endLine":34,"endColumn":10,"suggestions":"121"},{"ruleId":"104","severity":1,"message":"105","line":20,"column":12,"nodeType":"98","endLine":20,"endColumn":16},{"ruleId":"104","severity":1,"message":"106","line":20,"column":12,"nodeType":"98","endLine":20,"endColumn":16,"suggestions":"122"},{"ruleId":"104","severity":1,"message":"120","line":36,"column":8,"nodeType":"111","endLine":36,"endColumn":10,"suggestions":"123"},{"ruleId":"96","severity":1,"message":"117","line":82,"column":69,"nodeType":"98","messageId":"99","endLine":82,"endColumn":74},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'car' is assigned a value but never used.","'NavDropdown' is defined but never used.","'CarCard' is defined but never used.","'Card' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'func'. Either include it or remove the dependency array. If 'func' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["126"],"'secretKey' is assigned a value but never used.","'setSecretKey' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.","ArrayExpression",["127"],"'Redirect' is defined but never used.","'history' is assigned a value but never used.","'useDidMountEffect' is assigned a value but never used.",["128"],"'watch' is assigned a value but never used.",["129"],"'names' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'location.pathname'. Either include them or remove the dependency array.",["130"],["131"],["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"133","fix":"137"},{"desc":"133","fix":"138"},{"desc":"139","fix":"140"},{"desc":"133","fix":"141"},{"desc":"139","fix":"142"},"Update the dependencies array to be: [func]",{"range":"143","text":"144"},"Update the dependencies array to be: [init]",{"range":"145","text":"146"},{"range":"147","text":"144"},{"range":"148","text":"144"},"Update the dependencies array to be: [history, location.pathname]",{"range":"149","text":"150"},{"range":"151","text":"144"},{"range":"152","text":"150"},[619,623],"[func]",[5212,5214],"[init]",[629,633],[491,495],[1252,1254],"[history, location.pathname]",[701,705],[1241,1243]]